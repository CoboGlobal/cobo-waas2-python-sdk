# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class PaymentExtendPeriodSubscriptionActionData(BaseModel):
    """
    PaymentExtendPeriodSubscriptionActionData
    """  # noqa: E501
    periods: Optional[StrictInt] = Field(default=None, description="The periods needed updated.")
    action_type: PaymentSubscriptionAction
    subscription_id: StrictStr = Field(description="The subscription id in cobo.")
    signature: StrictStr = Field(description="The signature for transaction.")
    __properties: ClassVar[List[str]] = ["action_type", "subscription_id", "signature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentExtendPeriodSubscriptionActionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_type
        if self.action_type:
            _dict['action_type'] = self.action_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentExtendPeriodSubscriptionActionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_type": PaymentSubscriptionAction.from_dict(obj["action_type"]) if obj.get("action_type") is not None else None,
            "subscription_id": obj.get("subscription_id"),
            "signature": obj.get("signature")
        })
        return _obj

from cobo_waas2.models.payment_subscription_action import PaymentSubscriptionAction
# TODO: Rewrite to not use raise_errors
PaymentExtendPeriodSubscriptionActionData.model_rebuild(raise_errors=False)

