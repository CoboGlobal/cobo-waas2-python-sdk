# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.payment_subscription_action_data import PaymentSubscriptionActionData
from cobo_waas2.models.payment_subscription_action_status import PaymentSubscriptionActionStatus
from typing import Optional, Set
from typing_extensions import Self


class PaymentSubscriptionAction(BaseModel):
    """
    PaymentSubscriptionAction
    """  # noqa: E501
    request_id: StrictStr = Field(description="The action request id.")
    action_id: StrictStr = Field(description="The action id.")
    plan_id: StrictStr = Field(description="The plan id in cobo.")
    subscription_id: StrictStr = Field(description="The subscription id in cobo.")
    merchant_id: StrictStr = Field(description="The merchant id in cobo.")
    merchant_address: StrictStr = Field(description="The merchant address in cobo.")
    data: PaymentSubscriptionActionData
    status: PaymentSubscriptionActionStatus
    created_timestamp: Optional[StrictInt] = Field(default=None, description="The created time of the subscription action, represented as a UNIX timestamp in seconds.")
    updated_timestamp: Optional[StrictInt] = Field(default=None, description="The updated time of the subscription action, represented as a UNIX timestamp in seconds.")
    __properties: ClassVar[List[str]] = ["request_id", "action_id", "plan_id", "subscription_id", "merchant_id", "merchant_address", "data", "status", "created_timestamp", "updated_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSubscriptionAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSubscriptionAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "request_id": obj.get("request_id"),
            "action_id": obj.get("action_id"),
            "plan_id": obj.get("plan_id"),
            "subscription_id": obj.get("subscription_id"),
            "merchant_id": obj.get("merchant_id"),
            "merchant_address": obj.get("merchant_address"),
            "data": PaymentSubscriptionActionData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "status": obj.get("status"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp")
        })
        return _obj


