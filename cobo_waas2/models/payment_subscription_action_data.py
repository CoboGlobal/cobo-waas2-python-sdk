# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cobo_waas2.models.payment_approve_subscription_action_data import PaymentApproveSubscriptionActionData
from cobo_waas2.models.payment_base_subscription_action_data import PaymentBaseSubscriptionActionData
from cobo_waas2.models.payment_create_subscription_action_data import PaymentCreateSubscriptionActionData
from cobo_waas2.models.payment_developer_subscription_action_data import PaymentDeveloperSubscriptionActionData
from cobo_waas2.models.payment_extend_period_subscription_action_data import PaymentExtendPeriodSubscriptionActionData
from cobo_waas2.models.payment_update_amount_subscription_action_data import PaymentUpdateAmountSubscriptionActionData
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PAYMENTSUBSCRIPTIONACTIONDATA_ONE_OF_SCHEMAS = ["PaymentApproveSubscriptionActionData", "PaymentBaseSubscriptionActionData", "PaymentCreateSubscriptionActionData", "PaymentDeveloperSubscriptionActionData", "PaymentExtendPeriodSubscriptionActionData", "PaymentUpdateAmountSubscriptionActionData"]

class PaymentSubscriptionActionData(BaseModel):
    """
    PaymentSubscriptionActionData
    """
    # data type: PaymentCreateSubscriptionActionData
    oneof_schema_1_validator: Optional[PaymentCreateSubscriptionActionData] = None
    # data type: PaymentApproveSubscriptionActionData
    oneof_schema_2_validator: Optional[PaymentApproveSubscriptionActionData] = None
    # data type: PaymentBaseSubscriptionActionData
    oneof_schema_3_validator: Optional[PaymentBaseSubscriptionActionData] = None
    # data type: PaymentDeveloperSubscriptionActionData
    oneof_schema_4_validator: Optional[PaymentDeveloperSubscriptionActionData] = None
    # data type: PaymentExtendPeriodSubscriptionActionData
    oneof_schema_5_validator: Optional[PaymentExtendPeriodSubscriptionActionData] = None
    # data type: PaymentUpdateAmountSubscriptionActionData
    oneof_schema_6_validator: Optional[PaymentUpdateAmountSubscriptionActionData] = None
    actual_instance: Optional[Union[PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData]] = None
    one_of_schemas: Set[str] = { "PaymentApproveSubscriptionActionData", "PaymentBaseSubscriptionActionData", "PaymentCreateSubscriptionActionData", "PaymentDeveloperSubscriptionActionData", "PaymentExtendPeriodSubscriptionActionData", "PaymentUpdateAmountSubscriptionActionData" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PaymentSubscriptionActionData.model_construct()
        error_messages = []
        match = 0
        # validate data type: PaymentCreateSubscriptionActionData
        if not isinstance(v, PaymentCreateSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentCreateSubscriptionActionData`")
        else:
            match += 1
        # validate data type: PaymentApproveSubscriptionActionData
        if not isinstance(v, PaymentApproveSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentApproveSubscriptionActionData`")
        else:
            match += 1
        # validate data type: PaymentBaseSubscriptionActionData
        if not isinstance(v, PaymentBaseSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentBaseSubscriptionActionData`")
        else:
            match += 1
        # validate data type: PaymentDeveloperSubscriptionActionData
        if not isinstance(v, PaymentDeveloperSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentDeveloperSubscriptionActionData`")
        else:
            match += 1
        # validate data type: PaymentExtendPeriodSubscriptionActionData
        if not isinstance(v, PaymentExtendPeriodSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentExtendPeriodSubscriptionActionData`")
        else:
            match += 1
        # validate data type: PaymentUpdateAmountSubscriptionActionData
        if not isinstance(v, PaymentUpdateAmountSubscriptionActionData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentUpdateAmountSubscriptionActionData`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PaymentSubscriptionActionData with oneOf schemas: PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PaymentSubscriptionActionData with oneOf schemas: PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("action_type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `action_type` in the input.")

        # check if data type is `PaymentBaseSubscriptionActionData`
        if _data_type == "Approve":
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentBaseSubscriptionActionData`
        if _data_type == "Charge":
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentCreateSubscriptionActionData`
        if _data_type == "Create":
            instance.actual_instance = PaymentCreateSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentDeveloperSubscriptionActionData`
        if _data_type == "DeveloperPause":
            instance.actual_instance = PaymentDeveloperSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentDeveloperSubscriptionActionData`
        if _data_type == "DeveloperUnpause":
            instance.actual_instance = PaymentDeveloperSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentUpdateAmountSubscriptionActionData`
        if _data_type == "Downgrade":
            instance.actual_instance = PaymentUpdateAmountSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentExtendPeriodSubscriptionActionData`
        if _data_type == "ExtendPeriod":
            instance.actual_instance = PaymentExtendPeriodSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentBaseSubscriptionActionData`
        if _data_type == "Subscribe":
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentBaseSubscriptionActionData`
        if _data_type == "SubscribeAndCharge":
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentUpdateAmountSubscriptionActionData`
        if _data_type == "Upgrade":
            instance.actual_instance = PaymentUpdateAmountSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentApproveSubscriptionActionData`
        if _data_type == "PaymentApproveSubscriptionActionData":
            instance.actual_instance = PaymentApproveSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentBaseSubscriptionActionData`
        if _data_type == "PaymentBaseSubscriptionActionData":
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentCreateSubscriptionActionData`
        if _data_type == "PaymentCreateSubscriptionActionData":
            instance.actual_instance = PaymentCreateSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentDeveloperSubscriptionActionData`
        if _data_type == "PaymentDeveloperSubscriptionActionData":
            instance.actual_instance = PaymentDeveloperSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentExtendPeriodSubscriptionActionData`
        if _data_type == "PaymentExtendPeriodSubscriptionActionData":
            instance.actual_instance = PaymentExtendPeriodSubscriptionActionData.from_json(json_str)
            return instance

        # check if data type is `PaymentUpdateAmountSubscriptionActionData`
        if _data_type == "PaymentUpdateAmountSubscriptionActionData":
            instance.actual_instance = PaymentUpdateAmountSubscriptionActionData.from_json(json_str)
            return instance

        return instance
        # deserialize data into PaymentCreateSubscriptionActionData
        try:
            instance.actual_instance = PaymentCreateSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentApproveSubscriptionActionData
        try:
            instance.actual_instance = PaymentApproveSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentBaseSubscriptionActionData
        try:
            instance.actual_instance = PaymentBaseSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentDeveloperSubscriptionActionData
        try:
            instance.actual_instance = PaymentDeveloperSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentExtendPeriodSubscriptionActionData
        try:
            instance.actual_instance = PaymentExtendPeriodSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentUpdateAmountSubscriptionActionData
        try:
            instance.actual_instance = PaymentUpdateAmountSubscriptionActionData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PaymentSubscriptionActionData with oneOf schemas: PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            return instance
            # raise ValueError("No match found when deserializing the JSON string into PaymentSubscriptionActionData with oneOf schemas: PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


