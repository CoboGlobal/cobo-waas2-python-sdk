# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.payment_subscription_period_type import PaymentSubscriptionPeriodType
from typing import Optional, Set
from typing_extensions import Self


class PaymentSubscriptionPlanDetail(BaseModel):
    """
    PaymentSubscriptionPlanDetail
    """  # noqa: E501
    blockchain_plan_id: Optional[StrictStr] = Field(default=None, description="The subscription plan id in blockchain.")
    plan_id: StrictStr = Field(description="The plan id in cobo.")
    developer_plan_id: StrictStr = Field(description="The developer plan id.")
    period_type: PaymentSubscriptionPeriodType
    periods: StrictInt
    interval: StrictInt
    amount: StrictStr = Field(description="The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. ")
    token_id: Optional[StrictStr] = Field(default=None, description="The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` ")
    currency: Optional[StrictStr] = Field(default=None, description="The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.")
    __properties: ClassVar[List[str]] = ["plan_id", "developer_plan_id", "period_type", "periods", "interval", "amount", "token_id", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSubscriptionPlanDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSubscriptionPlanDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_id": obj.get("plan_id"),
            "developer_plan_id": obj.get("developer_plan_id"),
            "period_type": obj.get("period_type"),
            "periods": obj.get("periods"),
            "interval": obj.get("interval"),
            "amount": obj.get("amount"),
            "token_id": obj.get("token_id"),
            "currency": obj.get("currency")
        })
        return _obj


