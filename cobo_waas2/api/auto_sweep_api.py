# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from cobo_waas2.models.create_sweep_to_address import CreateSweepToAddress
from cobo_waas2.models.list_wallet_sweep_to_addresses200_response import ListWalletSweepToAddresses200Response
from cobo_waas2.models.sweep_to_address import SweepToAddress

from cobo_waas2.api_client import ApiClient, RequestSerialized
from cobo_waas2.api_response import ApiResponse
from cobo_waas2.rest import RESTResponseType


class AutoSweepApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: ApiClient = None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def create_wallet_sweep_to_addresses(
        self,
        create_sweep_to_address: Annotated[Optional[CreateSweepToAddress], Field(description="The request body to generates a new sweep to addresses within a specified wallet.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> SweepToAddress:
        """create wallet sweep to addresses

        This operation create a new sweep to address for the wallet. The old sweep to address will become invalid. 

        :param create_sweep_to_address: The request body to generates a new sweep to addresses within a specified wallet.
        :type create_sweep_to_address: CreateSweepToAddress
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_wallet_sweep_to_addresses_serialize(
            create_sweep_to_address=create_sweep_to_address,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SweepToAddress",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_wallet_sweep_to_addresses_with_http_info(
        self,
        create_sweep_to_address: Annotated[Optional[CreateSweepToAddress], Field(description="The request body to generates a new sweep to addresses within a specified wallet.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> ApiResponse[SweepToAddress]:
        """create wallet sweep to addresses

        This operation create a new sweep to address for the wallet. The old sweep to address will become invalid. 

        :param create_sweep_to_address: The request body to generates a new sweep to addresses within a specified wallet.
        :type create_sweep_to_address: CreateSweepToAddress
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_wallet_sweep_to_addresses_serialize(
            create_sweep_to_address=create_sweep_to_address,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SweepToAddress",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_wallet_sweep_to_addresses_without_preload_content(
        self,
        create_sweep_to_address: Annotated[Optional[CreateSweepToAddress], Field(description="The request body to generates a new sweep to addresses within a specified wallet.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> RESTResponseType:
        """create wallet sweep to addresses

        This operation create a new sweep to address for the wallet. The old sweep to address will become invalid. 

        :param create_sweep_to_address: The request body to generates a new sweep to addresses within a specified wallet.
        :type create_sweep_to_address: CreateSweepToAddress
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_wallet_sweep_to_addresses_serialize(
            create_sweep_to_address=create_sweep_to_address,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SweepToAddress",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _create_wallet_sweep_to_addresses_serialize(
        self,
        create_sweep_to_address,
    ) -> RequestSerialized:
        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_sweep_to_address is not None:
            _body_params = create_sweep_to_address

        # set the HTTP header `Accept`
        _header_params = {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/auto_sweep/sweep_to_addresses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
        )

    @validate_call
    def list_wallet_sweep_to_addresses(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> ListWalletSweepToAddresses200Response:
        """List wallet sweep to addresses

        This operation retrieves a list of sweep to addresses within your wallet. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_wallet_sweep_to_addresses_serialize(
            wallet_id=wallet_id,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWalletSweepToAddresses200Response",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_wallet_sweep_to_addresses_with_http_info(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> ApiResponse[ListWalletSweepToAddresses200Response]:
        """List wallet sweep to addresses

        This operation retrieves a list of sweep to addresses within your wallet. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_wallet_sweep_to_addresses_serialize(
            wallet_id=wallet_id,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWalletSweepToAddresses200Response",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_wallet_sweep_to_addresses_without_preload_content(
        self,
        wallet_id: Annotated[StrictStr, Field(description="The wallet ID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
    ) -> RESTResponseType:
        """List wallet sweep to addresses

        This operation retrieves a list of sweep to addresses within your wallet. 

        :param wallet_id: The wallet ID. (required)
        :type wallet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_wallet_sweep_to_addresses_serialize(
            wallet_id=wallet_id,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWalletSweepToAddresses200Response",
            '4XX': "ErrorResponse",
            '5XX': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _list_wallet_sweep_to_addresses_serialize(
        self,
        wallet_id,
    ) -> RequestSerialized:
        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if wallet_id is not None:
            
            _query_params.append(('wallet_id', wallet_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params = {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auto_sweep/sweep_to_addresses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
        )
