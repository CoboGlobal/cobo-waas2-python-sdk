# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tokenization_estimate_fee_request_operation_params import TokenizationEstimateFeeRequestOperationParams


class TestTokenizationEstimateFeeRequestOperationParams(unittest.TestCase):
    """TokenizationEstimateFeeRequestOperationParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TokenizationEstimateFeeRequestOperationParams:
        """Test TokenizationEstimateFeeRequestOperationParams
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TokenizationEstimateFeeRequestOperationParams`
        """
        model = TokenizationEstimateFeeRequestOperationParams()
        if include_optional:
            return TokenizationEstimateFeeRequestOperationParams(
                chain_id = 'ETH',
                source = None,
                token_params = None,
                operation_type = 'Issue',
                mints = [
                    cobo_waas2.models.tokenization_mint_token_params_mints_inner.TokenizationMintTokenParams_mints_inner(
                        amount = '0.99', 
                        to_address = '0x051A924H4dCb264226d7B036C2893a0D344', )
                    ],
                token_id = '8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8',
                burns = [
                    cobo_waas2.models.tokenization_burn_token_params_burns_inner.TokenizationBurnTokenParams_burns_inner(
                        amount = '0.99', 
                        from_address = '0x051A924H4dCb264226d7B036C2893a0D344', )
                    ],
                action = 'Grant',
                addresses = [{"address":"0x789abc...","note":"reason for blocklisting"},{"address":"0xdef012..."}],
                activation = True,
                data = None
            )
        else:
            return TokenizationEstimateFeeRequestOperationParams(
                chain_id = 'ETH',
                source = None,
                token_params = None,
                operation_type = 'Issue',
                mints = [
                    cobo_waas2.models.tokenization_mint_token_params_mints_inner.TokenizationMintTokenParams_mints_inner(
                        amount = '0.99', 
                        to_address = '0x051A924H4dCb264226d7B036C2893a0D344', )
                    ],
                token_id = '8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8',
                burns = [
                    cobo_waas2.models.tokenization_burn_token_params_burns_inner.TokenizationBurnTokenParams_burns_inner(
                        amount = '0.99', 
                        from_address = '0x051A924H4dCb264226d7B036C2893a0D344', )
                    ],
                action = 'Grant',
                addresses = [{"address":"0x789abc...","note":"reason for blocklisting"},{"address":"0xdef012..."}],
                activation = True,
        )
        """

    def testTokenizationEstimateFeeRequestOperationParams(self):
        """Test TokenizationEstimateFeeRequestOperationParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
