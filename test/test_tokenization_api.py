# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2 import Configuration
from cobo_waas2.api.tokenization_api import TokenizationApi


class TestTokenizationApi(unittest.TestCase):
    """TokenizationApi unit test stubs"""

    def setUp(self) -> None:
        Configuration.set_default(Configuration(
            api_private_key="c203fccc02a2269ec486d9c32ff74b5ba6ab0cdb461ee1fb0dfc616109115c06",
            host="https://api.sandbox.cobo.com/v2"
        ))
        self.api = TokenizationApi()

    def tearDown(self) -> None:
        pass

    def test_burn_tokenization(self) -> None:
        """
        Test case for burn_tokenization

        Burn tokens
        """
        """
        token_id = 'ETH_USDT'
        tokenization_burn_token_request = cobo_waas2.TokenizationBurnTokenRequest()

        api_response = self.api.burn_tokenization(token_id, tokenization_burn_token_request=tokenization_burn_token_request)
        """

    def test_estimate_tokenization_fee(self) -> None:
        """
        Test case for estimate_tokenization_fee

        Estimate tokenization operation fee
        """
        """
        tokenization_estimate_fee_request = cobo_waas2.TokenizationEstimateFeeRequest()

        api_response = self.api.estimate_tokenization_fee(tokenization_estimate_fee_request)
        """

    def test_get_tokenization_activity(self) -> None:
        """
        Test case for get_tokenization_activity

        Get tokenization activity details
        """
        """
        activity_id = 'b7c8e9d0-f1a2-3b4c-5d6e-7f8a9b0c1d2e'

        api_response = self.api.get_tokenization_activity(activity_id)
        """

    def test_get_tokenization_allowlist_activation(self) -> None:
        """
        Test case for get_tokenization_allowlist_activation

        Get allowlist activation status
        """
        """
        token_id = 'ETH_USDT'

        api_response = self.api.get_tokenization_allowlist_activation(token_id)
        """

    def test_get_tokenization_info(self) -> None:
        """
        Test case for get_tokenization_info

        Get token details
        """
        """
        token_id = 'ETH_USDT'

        api_response = self.api.get_tokenization_info(token_id)
        """

    def test_issue_token(self) -> None:
        """
        Test case for issue_token

        Issue a new token
        """
        """
        tokenization_issued_token_request = cobo_waas2.TokenizationIssuedTokenRequest()

        api_response = self.api.issue_token(tokenization_issued_token_request)
        """

    def test_list_issued_tokens(self) -> None:
        """
        Test case for list_issued_tokens

        List issued tokens
        """
        """
        chain_id = 'ETH'
        token_id = 'ETH_USDT'
        token_standard = cobo_waas2.TokenizationTokenStandard()
        status = cobo_waas2.TokenizationStatus()
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'

        api_response = self.api.list_issued_tokens(chain_id=chain_id, token_id=token_id, token_standard=token_standard, status=status, limit=limit, before=before, after=after)
        """

    def test_list_tokenization_activities(self) -> None:
        """
        Test case for list_tokenization_activities

        List tokenization activities
        """
        """
        token_id = 'ETH_USDT'
        activity_type = cobo_waas2.TokenizationOperationType()
        activity_status = cobo_waas2.TokenizationActivityStatus()
        limit = 10
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        direction = 'ASC'

        api_response = self.api.list_tokenization_activities(token_id=token_id, activity_type=activity_type, activity_status=activity_status, limit=limit, after=after, before=before, direction=direction)
        """

    def test_list_tokenization_allowlist_addresses(self) -> None:
        """
        Test case for list_tokenization_allowlist_addresses

        List allowlist addresses
        """
        """
        token_id = 'ETH_USDT'
        limit = 10
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        direction = 'ASC'

        api_response = self.api.list_tokenization_allowlist_addresses(token_id, limit=limit, after=after, before=before, direction=direction)
        """

    def test_list_tokenization_blocklist_addresses(self) -> None:
        """
        Test case for list_tokenization_blocklist_addresses

        List tokenization blocklist addresses
        """
        """
        token_id = 'ETH_USDT'
        limit = 10
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        direction = 'ASC'

        api_response = self.api.list_tokenization_blocklist_addresses(token_id, limit=limit, after=after, before=before, direction=direction)
        """

    def test_list_tokenization_holdings(self) -> None:
        """
        Test case for list_tokenization_holdings

        Get token holdings information
        """
        """
        token_id = 'ETH_USDT'
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'

        api_response = self.api.list_tokenization_holdings(token_id, limit=limit, before=before, after=after)
        """

    def test_list_tokenization_permissions(self) -> None:
        """
        Test case for list_tokenization_permissions

        List permissions of the token
        """
        """
        token_id = 'ETH_USDT'
        address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
        limit = 10
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        direction = 'ASC'

        api_response = self.api.list_tokenization_permissions(token_id, address=address, limit=limit, after=after, before=before, direction=direction)
        """

    def test_list_tokenization_supported_chains(self) -> None:
        """
        Test case for list_tokenization_supported_chains

        List supported chains for tokenization
        """
        """
        limit = 10
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'

        api_response = self.api.list_tokenization_supported_chains(limit=limit, after=after, before=before)
        """

    def test_mint_tokenization(self) -> None:
        """
        Test case for mint_tokenization

        Mint tokens
        """
        """
        token_id = 'ETH_USDT'
        tokenization_mint_token_request = cobo_waas2.TokenizationMintTokenRequest()

        api_response = self.api.mint_tokenization(token_id, tokenization_mint_token_request)
        """

    def test_pause_tokenization(self) -> None:
        """
        Test case for pause_tokenization

        Pause token contract
        """
        """
        token_id = 'ETH_USDT'
        tokenization_pause_token_request = cobo_waas2.TokenizationPauseTokenRequest()

        api_response = self.api.pause_tokenization(token_id, tokenization_pause_token_request=tokenization_pause_token_request)
        """

    def test_tokenization_contract_call(self) -> None:
        """
        Test case for tokenization_contract_call

        Call token contract
        """
        """
        token_id = 'ETH_USDT'
        tokenization_contract_call_request = cobo_waas2.TokenizationContractCallRequest()

        api_response = self.api.tokenization_contract_call(token_id, tokenization_contract_call_request=tokenization_contract_call_request)
        """

    def test_unpause_tokenization(self) -> None:
        """
        Test case for unpause_tokenization

        Unpause token contract
        """
        """
        token_id = 'ETH_USDT'
        tokenization_unpause_token_request = cobo_waas2.TokenizationUnpauseTokenRequest()

        api_response = self.api.unpause_tokenization(token_id, tokenization_unpause_token_request=tokenization_unpause_token_request)
        """

    def test_update_tokenization_allowlist_activation(self) -> None:
        """
        Test case for update_tokenization_allowlist_activation

        Activate or deactivate the allowlist
        """
        """
        token_id = 'ETH_USDT'
        tokenization_allowlist_activation_request = cobo_waas2.TokenizationAllowlistActivationRequest()

        api_response = self.api.update_tokenization_allowlist_activation(token_id, tokenization_allowlist_activation_request=tokenization_allowlist_activation_request)
        """

    def test_update_tokenization_allowlist_addresses(self) -> None:
        """
        Test case for update_tokenization_allowlist_addresses

        Update allowlist addresses
        """
        """
        token_id = 'ETH_USDT'
        tokenization_update_allowlist_addresses_request = cobo_waas2.TokenizationUpdateAllowlistAddressesRequest()

        api_response = self.api.update_tokenization_allowlist_addresses(token_id, tokenization_update_allowlist_addresses_request=tokenization_update_allowlist_addresses_request)
        """

    def test_update_tokenization_blocklist_addresses(self) -> None:
        """
        Test case for update_tokenization_blocklist_addresses

        Update tokenization blocklist addresses
        """
        """
        token_id = 'ETH_USDT'
        tokenization_update_blocklist_addresses_request = cobo_waas2.TokenizationUpdateBlocklistAddressesRequest()

        api_response = self.api.update_tokenization_blocklist_addresses(token_id, tokenization_update_blocklist_addresses_request=tokenization_update_blocklist_addresses_request)
        """

    def test_update_tokenization_permissions(self) -> None:
        """
        Test case for update_tokenization_permissions

        Update permissions of the token
        """
        """
        token_id = 'ETH_USDT'
        tokenization_update_permissions_request = cobo_waas2.TokenizationUpdatePermissionsRequest()

        api_response = self.api.update_tokenization_permissions(token_id, tokenization_update_permissions_request)
        """


if __name__ == '__main__':
    unittest.main()
