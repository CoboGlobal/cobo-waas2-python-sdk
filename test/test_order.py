# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.order import Order


class TestOrder(unittest.TestCase):
    """Order unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Order:
        """Test Order
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Order`
        """
        model = Order()
        if include_optional:
            return Order(
                order_id = '5001',
                merchant_id = '1001',
                token_id = 'ETH_USDT',
                chain_id = 'ETH',
                payable_amount = '103.03',
                receive_address = '0x1234567890abcdef1234567890abcdef12345678',
                currency = 'USD',
                order_amount = '100.00',
                fee_amount = '2.00',
                exchange_rate = '0.99',
                expired_at = 1711324800,
                merchant_order_code = 'M20240201001',
                psp_order_code = 'P20240201001',
                status = 'Pending',
                received_token_amount = '103.0305',
                created_timestamp = 1744689600,
                updated_timestamp = 1744689600,
                transactions = [
                    cobo_waas2.models.payment_transaction.PaymentTransaction(
                        tx_id = 'tx_123e4567-e89b-12d3-a456-426614174003', 
                        tx_hash = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', 
                        token_id = 'ETH_USDT', 
                        from_address = '0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537', 
                        to_address = '0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15', 
                        amount = '0.15', 
                        status = 'Submitted', 
                        created_timestamp = 1610445878970, 
                        updated_timestamp = 1610445878970, )
                    ]
            )
        else:
            return Order(
                order_id = '5001',
                token_id = 'ETH_USDT',
                chain_id = 'ETH',
                payable_amount = '103.03',
                receive_address = '0x1234567890abcdef1234567890abcdef12345678',
                currency = 'USD',
                order_amount = '100.00',
                fee_amount = '2.00',
                exchange_rate = '0.99',
                psp_order_code = 'P20240201001',
                status = 'Pending',
                received_token_amount = '103.0305',
        )
        """

    def testOrder(self):
        """Test Order"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
