# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tokenization_erc20_wrapped_token_params import TokenizationERC20WrappedTokenParams


class TestTokenizationERC20WrappedTokenParams(unittest.TestCase):
    """TokenizationERC20WrappedTokenParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TokenizationERC20WrappedTokenParams:
        """Test TokenizationERC20WrappedTokenParams
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TokenizationERC20WrappedTokenParams`
        """
        model = TokenizationERC20WrappedTokenParams()
        if include_optional:
            return TokenizationERC20WrappedTokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
                permissions = cobo_waas2.models.tokenization_erc20_wrapped_token_permission_params.TokenizationERC20WrappedTokenPermissionParams(
                    admin = ["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045","0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6"], 
                    minter = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], 
                    wrapper = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], 
                    manager = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], 
                    pauser = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], 
                    salvager = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], 
                    upgrader = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x1FcceD80Cbc2750e0276a53038845eC541E87fa2"], ),
                token_access_activated = False,
                underlying_token = '0xdac17f958d2ee523a2206206994597c13d831ec7'
            )
        else:
            return TokenizationERC20WrappedTokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
                underlying_token = '0xdac17f958d2ee523a2206206994597c13d831ec7',
        )
        """

    def testTokenizationERC20WrappedTokenParams(self):
        """Test TokenizationERC20WrappedTokenParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
