# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.list_staking_pools200_response import ListStakingPools200Response


class TestListStakingPools200Response(unittest.TestCase):
    """ListStakingPools200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListStakingPools200Response:
        """Test ListStakingPools200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListStakingPools200Response`
        """
        model = ListStakingPools200Response()
        if include_optional:
            return ListStakingPools200Response(
                data = [
                    cobo_waas2.models.pool_summary.PoolSummary(
                        id = 'babylon_btc', 
                        chain_id = 'Bitcoin', 
                        protocol = 'Babylon', 
                        protocol_icon_url = 'https://example.com/icon.png', 
                        supported_wallet_types = ["MPC"], 
                        supported_wallet_subtypes = ["Org-Controlled"], 
                        token_id = 'BTC', 
                        est_apr = 0.05, )
                    ],
                pagination = cobo_waas2.models.pagination.Pagination(
                    before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1', 
                    after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk', 
                    total_count = 10000, )
            )
        else:
            return ListStakingPools200Response(
        )
        """

    def testListStakingPools200Response(self):
        """Test ListStakingPools200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
