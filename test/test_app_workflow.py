# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.app_workflow import AppWorkflow


class TestAppWorkflow(unittest.TestCase):
    """AppWorkflow unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppWorkflow:
        """Test AppWorkflow
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppWorkflow`
        """
        model = AppWorkflow()
        if include_optional:
            return AppWorkflow(
                workflow_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                operation_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                operation_name = 'test@cobo.com',
                current_policies = [
                    cobo_waas2.models.app_workflow_policy.AppWorkflowPolicy(
                        action = cobo_waas2.models.policy_action.PolicyAction(
                            action_type = 'Pending', 
                            content = cobo_waas2.models.policy_action_content.PolicyAction_content(
                                type = 'PART_APPROVAL', 
                                roles = [
                                    'admin'
                                    ], 
                                user_ids = [
                                    'f47ac10b-58cc-4372-a567-0e02b2c3d479'
                                    ], 
                                threshold = 15, ), ), 
                        conditions = [
                            cobo_waas2.models.policy_condition.PolicyCondition(
                                field = 'amount', 
                                value_type = 'Pending', 
                                value = '11.23', 
                                operator = 'Pending', )
                            ], )
                    ]
            )
        else:
            return AppWorkflow(
                workflow_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                operation_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                operation_name = 'test@cobo.com',
                current_policies = [
                    cobo_waas2.models.app_workflow_policy.AppWorkflowPolicy(
                        action = cobo_waas2.models.policy_action.PolicyAction(
                            action_type = 'Pending', 
                            content = cobo_waas2.models.policy_action_content.PolicyAction_content(
                                type = 'PART_APPROVAL', 
                                roles = [
                                    'admin'
                                    ], 
                                user_ids = [
                                    'f47ac10b-58cc-4372-a567-0e02b2c3d479'
                                    ], 
                                threshold = 15, ), ), 
                        conditions = [
                            cobo_waas2.models.policy_condition.PolicyCondition(
                                field = 'amount', 
                                value_type = 'Pending', 
                                value = '11.23', 
                                operator = 'Pending', )
                            ], )
                    ],
        )
        """

    def testAppWorkflow(self):
        """Test AppWorkflow"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
