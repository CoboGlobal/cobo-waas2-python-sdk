# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tss_key_gen_extra import TSSKeyGenExtra


class TestTSSKeyGenExtra(unittest.TestCase):
    """TSSKeyGenExtra unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TSSKeyGenExtra:
        """Test TSSKeyGenExtra
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TSSKeyGenExtra`
        """
        model = TSSKeyGenExtra()
        if include_optional:
            return TSSKeyGenExtra(
                org = cobo_waas2.models.org_info.OrgInfo(
                    org_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 
                    name = 'Org name', 
                    created_timestamp = 1718619403933, ),
                project = cobo_waas2.models.mpc_project.MPCProject(
                    project_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec', 
                    org_id = 'f3b4a616-9c43-462e-8cb4-343e304fee64', 
                    name = 'Project name', 
                    participants = 3, 
                    threshold = 2, 
                    created_timestamp = 1718619403933, ),
                vault = cobo_waas2.models.mpc_vault.MPCVault(
                    vault_id = 'YPdbyVaVGqXXjkUsohHw', 
                    project_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec', 
                    name = 'Vault name', 
                    type = 'Org-Controlled', 
                    root_pubkeys = [
                        cobo_waas2.models.root_pubkey.RootPubkey(
                            root_pubkey = 'xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq', 
                            curve = 'SECP256K1', )
                        ], 
                    created_timestamp = 1718619403933, ),
                target_key_share_holder_group = cobo_waas2.models.key_share_holder_group.KeyShareHolderGroup(
                    key_share_holder_group_id = 'b33130a9-6e18-44a9-9e48-8b3b41921f0e', 
                    type = 'MainGroup', 
                    tss_key_share_groups = [
                        cobo_waas2.models.tss_groups.TSSGroups(
                            tss_key_share_group_id = 'mMedDioOKhTlhGyQRzMv', 
                            curve = 'SECP256K1', 
                            root_pubkey = 'xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq', )
                        ], 
                    key_share_holders = [
                        cobo_waas2.models.key_share_holder.KeyShareHolder(
                            name = 'Key share holder name', 
                            tss_node_id = 'coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi', 
                            online = True, 
                            signer = True, 
                            status = 'Valid', 
                            account_id = 'auth0|cobo|839305394802991371', )
                        ], 
                    participants = 3, 
                    threshold = 2, 
                    status = 'Valid', 
                    created_timestamp = 1718619403933, ),
                tss_request = cobo_waas2.models.tss_request.TSSRequest(
                    tss_request_id = '20240711114129000132315000003970', 
                    source_key_share_holder_group = cobo_waas2.models.source_group.SourceGroup(
                        key_share_holder_group_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 
                        tss_node_ids = [
                            'cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA'
                            ], ), 
                    target_key_share_holder_group_id = 'fd9519ae-507b-4605-b108-04d4e5ffcdd3', 
                    type = 'Recovery', 
                    status = 'Success', 
                    description = 'This is a request to create key shares using the Recovery Group for a key share holder in the Main Group if their key share has been lost (e.g. by losing their phone).', 
                    created_timestamp = 1701396866000, )
            )
        else:
            return TSSKeyGenExtra(
        )
        """

    def testTSSKeyGenExtra(self):
        """Test TSSKeyGenExtra"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
