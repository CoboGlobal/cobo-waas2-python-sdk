# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.list_token_balances_for_fee_station200_response_data_inner import ListTokenBalancesForFeeStation200ResponseDataInner


class TestListTokenBalancesForFeeStation200ResponseDataInner(unittest.TestCase):
    """ListTokenBalancesForFeeStation200ResponseDataInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListTokenBalancesForFeeStation200ResponseDataInner:
        """Test ListTokenBalancesForFeeStation200ResponseDataInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListTokenBalancesForFeeStation200ResponseDataInner`
        """
        model = ListTokenBalancesForFeeStation200ResponseDataInner()
        if include_optional:
            return ListTokenBalancesForFeeStation200ResponseDataInner(
                token_id = 'ETH',
                chain_id = 'ETH',
                balance = cobo_waas2.models.balance.Balance(
                    total = '100.0', 
                    available = '80.5', 
                    pending = '0', 
                    locked = '0', )
            )
        else:
            return ListTokenBalancesForFeeStation200ResponseDataInner(
                token_id = 'ETH',
                balance = cobo_waas2.models.balance.Balance(
                    total = '100.0', 
                    available = '80.5', 
                    pending = '0', 
                    locked = '0', ),
        )
        """

    def testListTokenBalancesForFeeStation200ResponseDataInner(self):
        """Test ListTokenBalancesForFeeStation200ResponseDataInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
