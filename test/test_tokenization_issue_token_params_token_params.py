# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tokenization_issue_token_params_token_params import TokenizationIssueTokenParamsTokenParams


class TestTokenizationIssueTokenParamsTokenParams(unittest.TestCase):
    """TokenizationIssueTokenParamsTokenParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TokenizationIssueTokenParamsTokenParams:
        """Test TokenizationIssueTokenParamsTokenParams
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TokenizationIssueTokenParamsTokenParams`
        """
        model = TokenizationIssueTokenParamsTokenParams()
        if include_optional:
            return TokenizationIssueTokenParamsTokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
                token_access_activated = False,
                permissions = cobo_waas2.models.tokenization_sol_token_permission_params.TokenizationSolTokenPermissionParams(
                    permanent_delegate = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', 
                    minter = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', 
                    freezer = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', 
                    updater = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', 
                    pauser = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM', )
            )
        else:
            return TokenizationIssueTokenParamsTokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
        )
        """

    def testTokenizationIssueTokenParamsTokenParams(self):
        """Test TokenizationIssueTokenParamsTokenParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
