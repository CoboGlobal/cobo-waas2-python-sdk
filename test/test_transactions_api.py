# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    The version of the OpenAPI document: 1.1.0
    Contact: support@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2 import Configuration
from cobo_waas2.api.transactions_api import TransactionsApi


class TestTransactionsApi(unittest.TestCase):
    """TransactionsApi unit test stubs"""

    def setUp(self) -> None:
        Configuration.set_default(Configuration(
            api_private_key="c203fccc02a2269ec486d9c32ff74b5ba6ab0cdb461ee1fb0dfc616109115c06",
            host="https://api.sandbox.cobo.com/v2"
        ))
        self.api = TransactionsApi()

    def tearDown(self) -> None:
        pass

    def test_cancel_transaction_by_id(self) -> None:
        """
        Test case for cancel_transaction_by_id

        Cancel transaction
        """
        """
        transaction_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'

        api_response = self.api.cancel_transaction_by_id(transaction_id)
        """

    def test_create_contract_call_transaction(self) -> None:
        """
        Test case for create_contract_call_transaction

        Call smart contract
        """
        """
        contract_call_params = cobo_waas2.ContractCallParams()

        api_response = self.api.create_contract_call_transaction(contract_call_params=contract_call_params)
        """

    def test_create_message_sign_transaction(self) -> None:
        """
        Test case for create_message_sign_transaction

        Sign message
        """
        """
        message_sign_params = cobo_waas2.MessageSignParams()

        api_response = self.api.create_message_sign_transaction(message_sign_params=message_sign_params)
        """

    def test_create_transfer_transaction(self) -> None:
        """
        Test case for create_transfer_transaction

        Transfer token
        """
        """
        transfer_params = cobo_waas2.TransferParams()

        api_response = self.api.create_transfer_transaction(transfer_params=transfer_params)
        """

    def test_drop_transaction_by_id(self) -> None:
        """
        Test case for drop_transaction_by_id

        Drop transaction
        """
        """
        transaction_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        transaction_rbf = cobo_waas2.TransactionRbf()

        api_response = self.api.drop_transaction_by_id(transaction_id, transaction_rbf=transaction_rbf)
        """

    def test_estimate_fee(self) -> None:
        """
        Test case for estimate_fee

        Estimate transaction fee
        """
        """
        estimate_fee_params = cobo_waas2.EstimateFeeParams()

        api_response = self.api.estimate_fee(estimate_fee_params=estimate_fee_params)
        """

    def test_get_transaction_by_id(self) -> None:
        """
        Test case for get_transaction_by_id

        Get transaction information
        """
        """
        transaction_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'

        api_response = self.api.get_transaction_by_id(transaction_id)
        """

    def test_list_transactions(self) -> None:
        """
        Test case for list_transactions

        List all transactions
        """
        """
        request_id = 'web_send_by_user_327_1610444045047'
        cobo_ids = '20231213122855000000000000000000,20231213122955000000000000000000'
        transaction_ids = 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
        transaction_hashes = '239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28'
        types = 'Deposit,Withdrawal'
        statuses = 'Completed,Failed'
        wallet_ids = 'f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868'
        chain_ids = 'BTC,ETH'
        token_ids = 'ETH_USDT,ETH_USDC'
        asset_ids = 'USDT,USDC'
        vault_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        project_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        min_created_timestamp = 1635744000000
        max_created_timestamp = 1635744000000
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'

        api_response = self.api.list_transactions(request_id=request_id, cobo_ids=cobo_ids, transaction_ids=transaction_ids, transaction_hashes=transaction_hashes, types=types, statuses=statuses, wallet_ids=wallet_ids, chain_ids=chain_ids, token_ids=token_ids, asset_ids=asset_ids, vault_id=vault_id, project_id=project_id, min_created_timestamp=min_created_timestamp, max_created_timestamp=max_created_timestamp, limit=limit, before=before, after=after)
        """

    def test_resend_transaction_by_id(self) -> None:
        """
        Test case for resend_transaction_by_id

        Resend transaction
        """
        """
        transaction_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        transaction_resend = cobo_waas2.TransactionResend()

        api_response = self.api.resend_transaction_by_id(transaction_id, transaction_resend=transaction_resend)
        """

    def test_speedup_transaction_by_id(self) -> None:
        """
        Test case for speedup_transaction_by_id

        Speed up transaction
        """
        """
        transaction_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
        transaction_rbf = cobo_waas2.TransactionRbf()

        api_response = self.api.speedup_transaction_by_id(transaction_id, transaction_rbf=transaction_rbf)
        """


if __name__ == '__main__':
    unittest.main()
