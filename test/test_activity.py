# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.activity import Activity


class TestActivity(unittest.TestCase):
    """Activity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Activity:
        """Test Activity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Activity`
        """
        model = Activity()
        if include_optional:
            return Activity(
                id = '0011039d-27fb-49ba-b172-6e0aa80e37ec',
                initiator = 'steve@example.com',
                initiator_type = 'API',
                type = 'Stake',
                wallet_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec',
                address = '0xAbCdE123456789aBcDeF123456789aBcDeF12345',
                pool_id = 'babylon_btc_signet',
                token_id = 'BTC',
                staking_id = '0011039d-27fb-49ba-b172-6e0aa80e37ec',
                request_ids = [
                    'f47ac10b-58cc-4372-a567-0e02b2c3d479'
                    ],
                amount = '100.00',
                transaction_ids = [
                    '0011039d-27fb-49ba-b172-6e0aa80e37ec'
                    ],
                timeline = [
                    cobo_waas2.models.activity_timeline.ActivityTimeline(
                        action = 'Submitted', 
                        status = 'success', 
                        timestamp = 1640995200000, 
                        transaction_id = 'aff0e1cb-15b2-4e1f-9b9d-a9133715986f', )
                    ],
                fee = None,
                status = 'Success',
                extra = None,
                created_timestamp = 1640995200000,
                updated_timestamp = 1640995200000
            )
        else:
            return Activity(
                pool_id = 'babylon_btc_signet',
                token_id = 'BTC',
                amount = '100.00',
                status = 'Success',
        )
        """

    def testActivity(self):
        """Test Activity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
