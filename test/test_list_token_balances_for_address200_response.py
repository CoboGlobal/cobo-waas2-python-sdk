# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: support@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.list_token_balances_for_address200_response import ListTokenBalancesForAddress200Response


class TestListTokenBalancesForAddress200Response(unittest.TestCase):
    """ListTokenBalancesForAddress200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListTokenBalancesForAddress200Response:
        """Test ListTokenBalancesForAddress200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListTokenBalancesForAddress200Response`
        """
        model = ListTokenBalancesForAddress200Response()
        if include_optional:
            return ListTokenBalancesForAddress200Response(
                data = [
                    cobo_waas2.models.token_balance.TokenBalance(
                        token_id = 'BTC', 
                        balance = cobo_waas2.models.token_balance_balance.TokenBalance_balance(
                            total = '100.0', 
                            available = '80.5', 
                            pending = '0', 
                            locked = '0', ), )
                    ],
                pagination = cobo_waas2.models.pagination.Pagination(
                    before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1', 
                    after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk', 
                    total_count = 10000, )
            )
        else:
            return ListTokenBalancesForAddress200Response(
        )
        """

    def testListTokenBalancesForAddress200Response(self):
        """Test ListTokenBalancesForAddress200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
