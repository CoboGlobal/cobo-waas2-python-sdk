# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tss_key_sign_extra import TSSKeySignExtra


class TestTSSKeySignExtra(unittest.TestCase):
    """TSSKeySignExtra unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TSSKeySignExtra:
        """Test TSSKeySignExtra
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TSSKeySignExtra`
        """
        model = TSSKeySignExtra()
        if include_optional:
            return TSSKeySignExtra(
                org = cobo_waas2.models.org_info.OrgInfo(
                    org_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 
                    biz_org_id = 1, 
                    name = 'Org name', 
                    created_timestamp = 1718619403933, ),
                project = cobo_waas2.models.mpc_project.MPCProject(
                    project_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec', 
                    org_id = 'f3b4a616-9c43-462e-8cb4-343e304fee64', 
                    name = 'Project name', 
                    participants = 3, 
                    threshold = 2, 
                    created_timestamp = 1718619403933, ),
                vault = cobo_waas2.models.mpc_vault.MPCVault(
                    vault_id = 'YPdbyVaVGqXXjkUsohHw', 
                    project_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec', 
                    name = 'Vault name', 
                    type = 'Org-Controlled', 
                    root_pubkeys = [
                        cobo_waas2.models.root_pubkey.RootPubkey(
                            root_pubkey = 'xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq', 
                            curve = 'SECP256K1', )
                        ], 
                    created_timestamp = 1718619403933, ),
                wallet = None,
                signer_key_share_holder_group = cobo_waas2.models.key_share_holder_group.KeyShareHolderGroup(
                    key_share_holder_group_id = 'b33130a9-6e18-44a9-9e48-8b3b41921f0e', 
                    type = 'MainGroup', 
                    tss_key_share_groups = [
                        cobo_waas2.models.tss_groups.TSSGroups(
                            tss_key_share_group_id = 'mMedDioOKhTlhGyQRzMv', 
                            curve = 'SECP256K1', 
                            root_pubkey = 'xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq', )
                        ], 
                    key_share_holders = [
                        cobo_waas2.models.key_share_holder.KeyShareHolder(
                            name = 'Key share holder name', 
                            tss_node_id = 'coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi', 
                            online = True, 
                            signer = True, 
                            status = 'Valid', 
                            account_id = 'auth0|cobo|839305394802991371', )
                        ], 
                    participants = 3, 
                    threshold = 2, 
                    status = 'Valid', 
                    created_timestamp = 1718619403933, ),
                source_addresses = [
                    cobo_waas2.models.address_info.AddressInfo(
                        address = '0x0000000000000000000000000000000000000000', 
                        chain_id = 'ETH', 
                        memo = '82840924', 
                        path = 'm/44/0/2/0/0', 
                        encoding = 'ENCODING_P2PKH', 
                        pubkey = 'xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH', 
                        x_only_pubkey = '0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54', 
                        root_pubkey = 'xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq', 
                        taproot_script_tree_hash = '0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b', 
                        taproot_internal_address = '3HYV6ta67197syD1ZVFganpmL2wLz4RyoC', )
                    ],
                transaction = cobo_waas2.models.transaction.Transaction(
                    transaction_id = 'aff0e1cb-15b2-4e1f-9b9d-a9133715986f', 
                    cobo_id = '20231213122855000000000000000000', 
                    request_id = '760a1955-e212-4dfb-a8d0-e66312a1a051', 
                    wallet_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479', 
                    type = 'Deposit', 
                    status = 'Submitted', 
                    sub_status = 'PendingDoubleCheck', 
                    failed_reason = 'Rejected by signer Cobo TSS', 
                    chain_id = 'ETH', 
                    token_id = 'ETH_USDT', 
                    asset_id = 'USDT', 
                    source = null, 
                    destination = null, 
                    result = null, 
                    fee = null, 
                    initiator = 'API Prod Key #1', 
                    initiator_type = 'API', 
                    confirmed_num = 12, 
                    confirming_threshold = 15, 
                    transaction_hash = '239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28', 
                    block_info = cobo_waas2.models.transaction_block_info.TransactionBlockInfo(
                        block_number = 123, 
                        block_timestamp = 1717740319, 
                        block_hash = '0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735', ), 
                    raw_tx_info = cobo_waas2.models.transaction_raw_tx_info.TransactionRawTxInfo(
                        used_nonce = 9, 
                        selected_utxos = [
                            cobo_waas2.models.transaction_selected_utxo.TransactionSelectedUtxo(
                                tx_hash = '7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo', 
                                vout_n = 0, 
                                address = '2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE', 
                                value = '0.5', 
                                redeem_script = '0x1cc56cbbac4622082221a8768d1d0901', 
                                revealed_script = '0x1cc56cbbac4622082221a8768d1d0901', )
                            ], 
                        raw_tx = '0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO', 
                        unsigned_raw_tx = '0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO', 
                        utxo_change = cobo_waas2.models.transaction_utxo_change.TransactionUtxoChange(
                            address = '2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE', 
                            value = '0.5', ), ), 
                    replacement = cobo_waas2.models.transaction_replacement.Transaction_replacement(
                        replaced_by_type = 'Resend', 
                        replaced_by_transaction_id = 'aff0e1cb-15b2-4e1f-9b9d-a9133715986f', 
                        replaced_by_transaction_hash = '239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28', 
                        replaced_type = 'Resend', 
                        replaced_transaction_id = 'aff0e1cb-15b2-4e1f-9b9d-a9133715986f', 
                        replaced_transaction_hash = '239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28', ), 
                    category = [
                        'Payment'
                        ], 
                    description = 'withdrawal to exchange trading account', 
                    is_loop = False, 
                    cobo_category = [
                        'AutoFueling'
                        ], 
                    extra = [
                        '{"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
'
                        ], 
                    fueling_info = cobo_waas2.models.transaction_fueling_info.TransactionFuelingInfo(
                        request_id = 'gas_760a1955-e212-4dfb-a8d0-e66312a1a051', 
                        transaction_id = 'b0530b27-104f-4338-87de-de01500326ea', ), 
                    created_timestamp = 1610445878970, 
                    updated_timestamp = 1610445878970, )
            )
        else:
            return TSSKeySignExtra(
        )
        """

    def testTSSKeySignExtra(self):
        """Test TSSKeySignExtra"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
