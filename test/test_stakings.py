# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: support@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.stakings import Stakings


class TestStakings(unittest.TestCase):
    """Stakings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Stakings:
        """Test Stakings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Stakings`
        """
        model = Stakings()
        if include_optional:
            return Stakings(
                id = '0011039d-27fb-49ba-b172-6e0aa80e37ec',
                wallet_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec',
                address = '0x0000000000000000000000000000000000000000',
                amounts = [
                    cobo_waas2.models.amount_details_inner.AmountDetails_inner(
                        status = 'Active', 
                        amount = '100.00', 
                        activity_id = '0011039d-27fb-49ba-b172-6e0aa80e37ec', )
                    ],
                initiator = 'Vanya@cobo.com',
                unlock_timestamp = 1640995200000,
                unlock_block_height = 871234,
                pool_id = 'babylon_btc',
                token_id = 'BTC',
                pos_chain = 'Babylon Chain',
                rewards_info = {},
                created_timestamp = 1640995200000,
                updated_timestamp = 1640995200000,
                validator_info = cobo_waas2.models.stakings_validator_info.Stakings_validator_info(
                    icon_url = 'https://example.com/logo.png', 
                    public_key = '0000000000000000000000000000000000000000000000000000000000000000', 
                    name = 'Cobo', 
                    address = '0x0000000000000000000000000000000000000000', 
                    commission_rate = '0.1', )
            )
        else:
            return Stakings(
                id = '0011039d-27fb-49ba-b172-6e0aa80e37ec',
                wallet_id = '0111039d-27fb-49ba-b172-6e0aa80e37ec',
                address = '0x0000000000000000000000000000000000000000',
                amounts = [
                    cobo_waas2.models.amount_details_inner.AmountDetails_inner(
                        status = 'Active', 
                        amount = '100.00', 
                        activity_id = '0011039d-27fb-49ba-b172-6e0aa80e37ec', )
                    ],
                pool_id = 'babylon_btc',
                token_id = 'BTC',
                created_timestamp = 1640995200000,
                updated_timestamp = 1640995200000,
                validator_info = cobo_waas2.models.stakings_validator_info.Stakings_validator_info(
                    icon_url = 'https://example.com/logo.png', 
                    public_key = '0000000000000000000000000000000000000000000000000000000000000000', 
                    name = 'Cobo', 
                    address = '0x0000000000000000000000000000000000000000', 
                    commission_rate = '0.1', ),
        )
        """

    def testStakings(self):
        """Test Stakings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
