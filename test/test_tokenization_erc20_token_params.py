# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.tokenization_erc20_token_params import TokenizationERC20TokenParams


class TestTokenizationERC20TokenParams(unittest.TestCase):
    """TokenizationERC20TokenParams unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TokenizationERC20TokenParams:
        """Test TokenizationERC20TokenParams
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TokenizationERC20TokenParams`
        """
        model = TokenizationERC20TokenParams()
        if include_optional:
            return TokenizationERC20TokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
                token_access_activated = False,
                permissions = cobo_waas2.models.tokenization_token_permission_params.TokenizationTokenPermissionParams(
                    admin = ["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045","0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6"], 
                    minter = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x8ba1f109551bD432803012645Hac136c34B8f7f7"], 
                    burner = ["0x8ba1f109551bD432803012645Hac136c34B8f7f7","0x9cb2f210662eE543904023756Ibd247d45C9g8g8"], 
                    manager = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x8ba1f109551bD432803012645Hac136c34B8f7f7"], 
                    pauser = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x8ba1f109551bD432803012645Hac136c34B8f7f7"], 
                    salvager = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x8ba1f109551bD432803012645Hac136c34B8f7f7"], 
                    upgrader = ["0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6","0x8ba1f109551bD432803012645Hac136c34B8f7f7"], )
            )
        else:
            return TokenizationERC20TokenParams(
                standard = 'ERC20',
                name = 'My Awesome Token',
                symbol = 'MAT',
                decimals = 18,
        )
        """

    def testTokenizationERC20TokenParams(self):
        """Test TokenizationERC20TokenParams"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
