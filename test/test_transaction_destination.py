# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: support@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2.models.transaction_destination import TransactionDestination


class TestTransactionDestination(unittest.TestCase):
    """TransactionDestination unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransactionDestination:
        """Test TransactionDestination
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransactionDestination`
        """
        model = TransactionDestination()
        if include_optional:
            return TransactionDestination(
                destination_type = 'Address',
                account_output = cobo_waas2.models.transaction_transfer_to_address_destination_account_output.TransactionTransferToAddressDestination_account_output(
                    address = '19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku', 
                    memo = '82840924', 
                    amount = '1.5', ),
                utxo_outputs = [
                    cobo_waas2.models.transaction_transfer_to_address_destination_utxo_outputs_inner.TransactionTransferToAddressDestination_utxo_outputs_inner(
                        address = '19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO', 
                        amount = '1.5', 
                        script = '76a914fb37342f6275b13936799def06f2DEMO', )
                    ],
                change_address = '19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO',
                force_internal = False,
                force_external = False,
                wallet_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                sub_wallet_id = 'Asset',
                exchange_id = 'binance',
                amount = '1.5',
                address = '19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku',
                value = '1.5',
                calldata = '[B@352ce817',
                message = 'YWFhYQ==',
                structured_data = {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
,
                wallet_type = 'Custodial',
                wallet_subtype = 'Asset',
                memo = '82840924'
            )
        else:
            return TransactionDestination(
                destination_type = 'Address',
                wallet_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                amount = '1.5',
                address = '19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku',
                calldata = '[B@352ce817',
                message = 'YWFhYQ==',
                structured_data = {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
,
                wallet_type = 'Custodial',
                wallet_subtype = 'Asset',
        )
        """

    def testTransactionDestination(self):
        """Test TransactionDestination"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
