# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cobo_waas2 import Configuration
from cobo_waas2.api.payment_api import PaymentApi


class TestPaymentApi(unittest.TestCase):
    """PaymentApi unit test stubs"""

    def setUp(self) -> None:
        Configuration.set_default(Configuration(
            api_private_key="c203fccc02a2269ec486d9c32ff74b5ba6ab0cdb461ee1fb0dfc616109115c06",
            host="https://api.sandbox.cobo.com/v2"
        ))
        self.api = PaymentApi()

    def tearDown(self) -> None:
        pass

    def test_cancel_refund_by_id(self) -> None:
        """
        Test case for cancel_refund_by_id

        Cancel refund order
        """
        """
        refund_id = 'R20250304-M1001-1001'

        api_response = self.api.cancel_refund_by_id(refund_id)
        """

    def test_create_crypto_address(self) -> None:
        """
        Test case for create_crypto_address

        Create crypto address
        """
        """
        create_crypto_address_request = cobo_waas2.CreateCryptoAddressRequest()

        api_response = self.api.create_crypto_address(create_crypto_address_request=create_crypto_address_request)
        """

    def test_create_forced_sweep_request(self) -> None:
        """
        Test case for create_forced_sweep_request

        Create forced sweep
        """
        """
        forced_sweep_request = cobo_waas2.ForcedSweepRequest()

        api_response = self.api.create_forced_sweep_request(forced_sweep_request=forced_sweep_request)
        """

    def test_create_merchant(self) -> None:
        """
        Test case for create_merchant

        Create merchant
        """
        """
        create_merchant_request = cobo_waas2.CreateMerchantRequest()

        api_response = self.api.create_merchant(create_merchant_request=create_merchant_request)
        """

    def test_create_payment_order(self) -> None:
        """
        Test case for create_payment_order

        Create pay-in order
        """
        """
        create_payment_order_request = cobo_waas2.CreatePaymentOrderRequest()

        api_response = self.api.create_payment_order(create_payment_order_request=create_payment_order_request)
        """

    def test_create_refund(self) -> None:
        """
        Test case for create_refund

        Create refund order
        """
        """
        create_refund_request = cobo_waas2.CreateRefundRequest()

        api_response = self.api.create_refund(create_refund_request=create_refund_request)
        """

    def test_create_settlement_request(self) -> None:
        """
        Test case for create_settlement_request

        Create settlement request
        """
        """
        create_settlement_request_request = cobo_waas2.CreateSettlementRequestRequest()

        api_response = self.api.create_settlement_request(create_settlement_request_request=create_settlement_request_request)
        """

    def test_delete_crypto_address(self) -> None:
        """
        Test case for delete_crypto_address

        Delete crypto address
        """
        """
        crypto_address_id = 'addr_ethusdt_20250506T123456_ab12cd'

        api_response = self.api.delete_crypto_address(crypto_address_id)
        """

    def test_get_exchange_rate(self) -> None:
        """
        Test case for get_exchange_rate

        Get exchange rate
        """
        """
        token_id = 'ETH_USDT'
        currency = 'USD'

        api_response = self.api.get_exchange_rate(token_id, currency)
        """

    def test_get_payer_balance_by_address(self) -> None:
        """
        Test case for get_payer_balance_by_address

        Get payer balance by address
        """
        """
        merchant_id = 'M1001'
        payer_id = 'P20250619T0310056d7aa'
        token_id = 'ETH_USDT'

        api_response = self.api.get_payer_balance_by_address(merchant_id, payer_id, token_id)
        """

    def test_get_payment_order_detail_by_id(self) -> None:
        """
        Test case for get_payment_order_detail_by_id

        Get pay-in order information
        """
        """
        order_id = 'O20250304-M1001-1001'

        api_response = self.api.get_payment_order_detail_by_id(order_id)
        """

    def test_get_psp_balance(self) -> None:
        """
        Test case for get_psp_balance

        Get psp balance
        """
        """
        token_id = 'ETH_USDT'

        api_response = self.api.get_psp_balance(token_id)
        """

    def test_get_refund_detail_by_id(self) -> None:
        """
        Test case for get_refund_detail_by_id

        Get refund order information
        """
        """
        refund_id = 'R20250304-M1001-1001'

        api_response = self.api.get_refund_detail_by_id(refund_id)
        """

    def test_get_refunds(self) -> None:
        """
        Test case for get_refunds

        List all refund orders
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        merchant_id = 'M1001'
        request_id = 'random_request_id'
        statuses = 'Pending,Processing'

        api_response = self.api.get_refunds(limit=limit, before=before, after=after, merchant_id=merchant_id, request_id=request_id, statuses=statuses)
        """

    def test_get_settlement_by_id(self) -> None:
        """
        Test case for get_settlement_by_id

        Get settlement request information
        """
        """
        settlement_request_id = 'S20250304-1001'

        api_response = self.api.get_settlement_by_id(settlement_request_id)
        """

    def test_get_settlement_info_by_ids(self) -> None:
        """
        Test case for get_settlement_info_by_ids

        Get withdrawable balances
        """
        """
        merchant_ids = 'M1001,M1002,M1003'
        currency = 'USD'
        acquiring_type = cobo_waas2.AcquiringType()

        api_response = self.api.get_settlement_info_by_ids(merchant_ids=merchant_ids, currency=currency, acquiring_type=acquiring_type)
        """

    def test_get_top_up_address(self) -> None:
        """
        Test case for get_top_up_address

        Get top-up address
        """
        """
        merchant_id = 'M1001'
        token_id = 'ETH_USDT'
        custom_payer_id = 'payer_0001'

        api_response = self.api.get_top_up_address(merchant_id, token_id, custom_payer_id)
        """

    def test_list_bank_accounts(self) -> None:
        """
        Test case for list_bank_accounts

        List all bank accounts
        """
        """

        api_response = self.api.list_bank_accounts()
        """

    def test_list_crypto_addresses(self) -> None:
        """
        Test case for list_crypto_addresses

        List crypto addresses
        """
        """
        token_id = 'ETH_USDT'

        api_response = self.api.list_crypto_addresses(token_id=token_id)
        """

    def test_list_forced_sweep_requests(self) -> None:
        """
        Test case for list_forced_sweep_requests

        List forced sweeps
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        request_id = 'random_request_id'

        api_response = self.api.list_forced_sweep_requests(limit=limit, before=before, after=after, request_id=request_id)
        """

    def test_list_merchant_balances(self) -> None:
        """
        Test case for list_merchant_balances

        List merchant balances
        """
        """
        token_id = 'ETH_USDT'
        acquiring_type = cobo_waas2.AcquiringType()
        merchant_ids = 'M1001,M1002,M1003'

        api_response = self.api.list_merchant_balances(token_id, acquiring_type, merchant_ids=merchant_ids)
        """

    def test_list_merchants(self) -> None:
        """
        Test case for list_merchants

        List all merchants
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        keyword = 'keyword'
        wallet_id = 'f47ac10b-58cc-4372-a567-0e02b2c3d479'

        api_response = self.api.list_merchants(limit=limit, before=before, after=after, keyword=keyword, wallet_id=wallet_id)
        """

    def test_list_payment_orders(self) -> None:
        """
        Test case for list_payment_orders

        List all pay-in orders
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        merchant_id = 'M1001'
        psp_order_id = 'P20240201001'
        statuses = 'Pending,Processing'

        api_response = self.api.list_payment_orders(limit=limit, before=before, after=after, merchant_id=merchant_id, psp_order_id=psp_order_id, statuses=statuses)
        """

    def test_list_payment_supported_tokens(self) -> None:
        """
        Test case for list_payment_supported_tokens

        List all supported tokens
        """
        """

        api_response = self.api.list_payment_supported_tokens()
        """

    def test_list_payment_wallet_balances(self) -> None:
        """
        Test case for list_payment_wallet_balances

        List payment wallet balances
        """
        """
        token_id = 'ETH_USDT'
        wallet_ids = 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d472'

        api_response = self.api.list_payment_wallet_balances(token_id, wallet_ids=wallet_ids)
        """

    def test_list_settlement_details(self) -> None:
        """
        Test case for list_settlement_details

        List all settlement details
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        merchant_id = 'M1001'
        statuses = 'Pending,Processing'

        api_response = self.api.list_settlement_details(limit=limit, before=before, after=after, merchant_id=merchant_id, statuses=statuses)
        """

    def test_list_settlement_requests(self) -> None:
        """
        Test case for list_settlement_requests

        List all settlement requests
        """
        """
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        request_id = 'random_request_id'

        api_response = self.api.list_settlement_requests(limit=limit, before=before, after=after, request_id=request_id)
        """

    def test_list_top_up_payers(self) -> None:
        """
        Test case for list_top_up_payers

        List payers
        """
        """
        merchant_id = 'M1001'
        limit = 10
        before = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1'
        after = 'RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk'
        payer_id = 'P20250619T0310056d7aa'

        api_response = self.api.list_top_up_payers(merchant_id, limit=limit, before=before, after=after, payer_id=payer_id)
        """

    def test_update_merchant_by_id(self) -> None:
        """
        Test case for update_merchant_by_id

        Update merchant
        """
        """
        merchant_id = 'M1001'
        update_merchant_by_id_request = cobo_waas2.UpdateMerchantByIdRequest()

        api_response = self.api.update_merchant_by_id(merchant_id, update_merchant_by_id_request=update_merchant_by_id_request)
        """

    def test_update_payment_order(self) -> None:
        """
        Test case for update_payment_order

        Update pay-in order
        """
        """
        order_id = 'O20250304-M1001-1001'
        update_payment_order_request = cobo_waas2.UpdatePaymentOrderRequest()

        api_response = self.api.update_payment_order(order_id, update_payment_order_request=update_payment_order_request)
        """

    def test_update_refund_by_id(self) -> None:
        """
        Test case for update_refund_by_id

        Update refund order
        """
        """
        refund_id = 'R20250304-M1001-1001'
        update_refund_by_id_request = cobo_waas2.UpdateRefundByIdRequest()

        api_response = self.api.update_refund_by_id(refund_id, update_refund_by_id_request=update_refund_by_id_request)
        """

    def test_update_top_up_address(self) -> None:
        """
        Test case for update_top_up_address

        Update top-up address
        """
        """
        update_top_up_address = cobo_waas2.UpdateTopUpAddress()

        api_response = self.api.update_top_up_address(update_top_up_address=update_top_up_address)
        """


if __name__ == '__main__':
    unittest.main()
